"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class LcmNumpyArray(object):
    __slots__ = ["num_dimensions", "shape", "length", "data"]

    def __init__(self):
        self.num_dimensions = 0
        self.shape = []
        self.length = 0
        self.data = []

    def encode(self):
        buf = BytesIO()
        buf.write(LcmNumpyArray._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.num_dimensions))
        buf.write(struct.pack('>%di' % self.num_dimensions, *self.shape[:self.num_dimensions]))
        buf.write(struct.pack(">i", self.length))
        buf.write(struct.pack('>%dd' % self.length, *self.data[:self.length]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LcmNumpyArray._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LcmNumpyArray._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = LcmNumpyArray()
        self.num_dimensions = struct.unpack(">b", buf.read(1))[0]
        self.shape = struct.unpack('>%di' % self.num_dimensions, buf.read(self.num_dimensions * 4))
        self.length = struct.unpack(">i", buf.read(4))[0]
        self.data = struct.unpack('>%dd' % self.length, buf.read(self.length * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if LcmNumpyArray in parents: return 0
        tmphash = (0x249b9b0f47bdd803) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if LcmNumpyArray._packed_fingerprint is None:
            LcmNumpyArray._packed_fingerprint = struct.pack(">Q", LcmNumpyArray._get_hash_recursive([]))
        return LcmNumpyArray._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

